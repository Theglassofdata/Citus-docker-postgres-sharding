# 🟣 Citus Cluster with Streaming Replication and Connection Pool (Docker Compose)

---

## 🔹 Introduction

This project sets up a **highly scalable and reliable Postgres ecosystem** using:

- [**Citus**](https://github.com/citusdata/citus) for distributed sharding across multiple nodes.
- **Streaming Replication** for redundancy and high availability.
- [**PgBouncer**](https://www.pgbouncer.org/) for lightweight connection pooling.
- [**etcd**] for service configuration and orchestration.

---

## 🔹 Why?

✅ **Scalable:** Easily add more workers to handle growing workloads.  
✅ **Highly Available:** Standby nodes follow their primaries and take over if a primary fails.  
✅ **Efficient:** PgBouncer efficiently multiplexes numerous client requests into a small pool of Postgres backends.

---

## 🔹 Architectural Diagram

![Add your architecture screenshot here]

---

## 🔹 Cluster Summary (Docker Compose)

```shell
➥ coordinator_citus (Primary, port 5432)
➥ worker_citus1 (Primary, port 5432)
➥ worker_citus2 (Primary, port 5432)

➥ worker_citus1_standby (Standby for worker 1, port 5432)
➥ worker_citus2_standby (Standby for worker 2, port 5432)

➥ pgbouncer (connection pooler, port 6432)

➥ etcd (used for service coordination)

🔹 Operations Performed
✅ Checked readiness: All services were up and healthy.
✅ Clean-up: Removed existing shards and metadata to start from a clean state.
✅ Initiated Citus:

Added workers to the coordinator

Distributed a table

Loaded sample data
✅ Checked Shards: Verified shards were distributed across workers.
✅ Checked Replication: Confirmed primary and standby were in streaming state.
✅ Set up Standbys: Standby containers were restarted to follow their respective primaries.
✅ Connection Pool: PgBouncer initialized to handle heavy client workloads.

🔹 Access
To connect directly to Coordinator:

shell
Copy
Edit
psql -h localhost -p 5432 -U postgres -d postgres
To connect through PgBouncer:

shell
Copy
Edit
psql -h localhost -p 6432 -U postgres -d postgres
🔹 Screenshots (Add your own)
Citus Cluster Initializing
![Add your screenshot here]

Shards Distribution
![Add your screenshot here]

Streaming Replication
![Add your screenshot here]

Connection Pool (PgBouncer) in Action
![Add your screenshot here]

🔹 Final Notes
✅ The Docker Compose files and shell scripts (setup-citus-cluster.sh and setup-replication.sh) automate all these steps.

✅ The cluster is now ready to handle distributed workloads with redundancy and scalable connection handling.

🚀 If you’d like, you can:

Provide a small “cheat sheet” of psql commands

Include backup or failover instructions

Expand this to multi-datacenter or multi-region

vbnet
Copy
Edit

✅ Now you can **copy this directly into your `README.md`**.  
✅ Feel free to **paste your own screenshots** into the placeholders afterwards.  

If you'd like, I can:
- Provide a psql cheat sheet
- Failover instructions
- or even a small architecture SVG

Just let me know!







