# 🚀 Citus Distributed PostgreSQL Cluster with Docker Compose

This repository sets up a **production-grade, multi-node PostgreSQL cluster** powered by [Citus](https://www.citusdata.com/) for **horizontal scaling and distributed SQL**. It's built using **Docker Compose** and includes **PgBouncer** for connection pooling and **etcd** for optional distributed service coordination.

---

## 📌 What This Project Does

✅ Spins up a full Citus cluster:
- 1 **Coordinator node** (PostgreSQL + Citus)
- 2 **Worker nodes**
- 1 **PgBouncer** instance for efficient client-side pooling
- 1 **etcd** instance for service discovery (optional, future use)

✅ Initializes the cluster **manually and cleanly** with:
- A simple, one-shot `setup-citus-cluster.sh` script
- Creation of a test distributed table
- Automatic shard distribution across workers

✅ Fully containerized, repeatable, and uses **trust-based internal authentication** for simplicity.

---

## 🛠️ Technologies Used

| Component       | Purpose                              |
|-----------------|--------------------------------------|
| PostgreSQL 16   | Base relational database             |
| Citus 12.1      | Extension for distributed queries     |
| Docker Compose  | Multi-container orchestration        |
| PgBouncer       | Lightweight connection pooler        |
| etcd            | Service coordination (optional here) |
| Bash            | Setup orchestration script           |

---

## 📂 Folder Structure

```
.
├── docker-compose.yml
├── setup-citus-cluster.sh
├── secrets/
│   └── db_password.txt
├── pgbouncer/
│   ├── pgbouncer.ini
│   └── userlist.txt
└── README.md
```

---

## ⚙️ How It Works

1. **Docker Compose spins up services**:
   - Coordinator + workers start with `trust` auth
   - Volumes are mounted for persistent storage

2. **`setup-citus-cluster.sh` is run manually** after containers are up:
   - Waits for Postgres to become ready
   - Initializes the cluster and registers worker nodes
   - Creates and distributes a sample table (`test_distributed`)

3. **PgBouncer** listens on port `6432` for app/client queries.

---

## 🚀 Getting Started

### 🔧 Prerequisites

- Docker & Docker Compose installed
- Unix-like terminal (Linux, macOS, or WSL)

---

### 🛠️ Setup Steps

```bash
# Step 1: Clone the repository
git clone https://github.com/yourusername/citus-cluster-docker.git
cd citus-cluster-docker

# Step 2: Start all services
docker compose up -d

# Step 3: Wait 15–20 seconds for containers to fully start
docker compose ps

# Step 4: Run the cluster setup script
chmod +x setup-citus-cluster.sh
./setup-citus-cluster.sh

# Step 5: Verify worker registration
psql -h localhost -p 6432 -U postgres -d postgres -c "SELECT * FROM pg_dist_node;"
```

---

## ✅ Expected Output

```sql
 nodename     | nodeport | groupid | isactive
--------------+----------+---------+----------
 worker_citus1 |     5432 |       1 | t
 worker_citus2 |     5432 |       2 | t
```

---

## 🧪 Test Query

```sql
SELECT * FROM test_distributed;
SELECT COUNT(*) FROM test_distributed;
SELECT * FROM pg_dist_shard;
```

---

## 📊 Architecture Overview

```text
+---------------------------+
|     Your Applications     |
|    (psql, backend apps)   |
+------------+--------------+
             |
             v
+---------------------------+
|        PgBouncer          | <--- Exposed at localhost:6432
+------------+--------------+
             |
             v
+---------------------------+
|  Citus Coordinator Node   |
|  (postgres + citus ext)   |
+------------+--------------+
             |
     ---------------------
     |                   |
     v                   v
+-----------+     +-----------+
| Worker 1  |     | Worker 2  |
| Postgres  |     | Postgres  |
+-----------+     +-----------+
```

---

## 🛡️ Notes

- **All inter-node auth is set to `trust`** for dev simplicity. Use password or certificate auth for production.
- **No `.sql` auto-run** — all setup is via a clear shell script you control.
- Compatible with **extending to 3+ workers**, **HA setups**, or **monitoring** via Prometheus.

---

## 📦 Cleanup

To reset the cluster completely:

```bash
docker compose down -v
docker system prune -f
```

---

## 🤝 Contributing

Pull requests welcome! If you want to add:
- Auto-failover (e.g., with Patroni or pg_auto_failover)
- Monitoring with Prometheus/Grafana
- CI/CD integration

Feel free to fork or open a PR!

---

## 📄 License

MIT © RAHUL RAJ