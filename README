# Citus Cluster with Streaming Replication and Connection Pool (Docker Compose)

Welcome to the **Citus Cluster Project** repository! 🚀  
This project demonstrates **how to deploy a scalable and highly available Postgres ecosystem** using **Docker Compose**.  
The architecture comprises:

- **Citus** for distributed scaling.
- **Streaming Replication** for redundancy and failover.
- **PgBouncer** for lightweight connection pooling.
- **etcd** for service coordination.

This portfolio piece highlights industry best practices for:
- Database Sharding
- High Availability
- Connection Pooling
- Container Orchestration
- Failover Mechanisms
- Docker Compose Operations

---

## 📖 Project Overview

This project involves:

1️⃣ **Designing a scalable architecture** for Postgres with Citus for horizontal scaling.  
2️⃣ **Setting up Streaming Replication** to enable failover and redundancy.  
3️⃣ **Installing PgBouncer** to efficiently handle numerous client connections.  
4️⃣ **Using etcd** to manage service configuration and orchestration.  
5️⃣ **Docker Compose** to spin up all components quickly and easily.

---

## 🛠 Important Tools:

✅ **Docker Compose:** Orchestrate multi-container services with ease.  
✅ **Citus:** Enables scaling Postgres horizontally.  
✅ **PgBouncer:** Connection pooler to efficiently handle numerous database sessions.  
✅ **etcd:** Reliable key-value store for service coordination.  
✅ **Postgres:** The base relational database.  

---

## 🚀 Project Requirements

### Cluster Setup (Docker Compose)

➥ **Coordinator:** Acts as the main node for Citus.  
➥ **Workers:** Handle shards and execute distributed workloads.  
➥ **Replicas:** Standby nodes configured for physical streaming.  
➥ **PgBouncer:** Connection pool to handle large number of client requests.  
➥ **etcd:** Stores service configuration and health information.

---

## 🏹 Operations Performed

✅ Cluster initialized successfully with **Docker Compose**.  
✅ Citus **coordinator and workers were up and healthy**.  
✅ Standby nodes were configured for **streaming replication**.  
✅ PgBouncer initialized to handle all client requests through a pool.  
✅ etcd provided service orchestration and metadata storage.  

---

## 🏹 Access

➥ To connect directly to the **Coordinator**:

```shell
psql -h localhost -p 5432 -U postgres -d postgres

➥ To connect through PgBouncer:
psql -h localhost -p 6432 -U postgres -d postgres

🏹 Architectural Diagram
![Add your architecture screenshot here]

🏹 Cluster Summary (Docker Compose)

➥ coordinator_citus (Primary, port 5432)

➥ worker_citus1 (Primary, port 5432)

➥ worker_citus2 (Primary, port 5432)

➥ worker_citus1_standby (Standby for worker 1, port 5432)

➥ worker_citus2_standby (Standby for worker 2, port 5432)

➥ pgbouncer (connection pool, port 6432)

➥ etcd (coordination service)


🛡 License
This project is licensed under the MIT License.
You are free to use, modify, and share this project with proper attribution.

🌟 About Me
Hi there! I'm Rahul Raj
Let's connect and collaborate on future data-intensive projects!
LinkedIn | Github | Portfolio

yaml
Copy
Edit

---

✅ Now you can:

➥ **Save this directly as `README.md` in your repository.**  
➥ **Add your screenshots:**  
Simply put your `.png` files under `docs/` and update the `![Add your architecture screenshot here]` path.

➥ Push it to Git and you have a polished, portfolio-ready Citus Cluster project!

---

If you'd like, I can:

- Provide you a directory structure with files you should create.
- Give you a complete `docker-compose.yaml`.
- Provide you a sample `init-citus.sql`.

Just let me know! 🌟


